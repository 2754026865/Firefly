---
import ImageWrapper from "../components/misc/ImageWrapper.astro";
import { siteConfig } from "../config";
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import MainGridLayout from "../layouts/MainGridLayout.astro";

// 服务器端只传递配置信息到客户端
const BANGUMI_USER_ID = siteConfig.bangumi?.userId || "your-user-id";

// 收藏状态映射
const COLLECTION_TYPES = {
  1: { key: "wish", name: "想看", icon: "⏰", color: "amber" },
  2: { key: "done", name: "看过", icon: "✅", color: "blue" },
  3: { key: "doing", name: "在看", icon: "▶️", color: "green" },
  4: { key: "onhold", name: "搁置", icon: "⏸️", color: "orange" },
  5: { key: "dropped", name: "抛弃", icon: "❌", color: "red" },
} as const;
---

<MainGridLayout
  title={i18n(I18nKey.anime)}
  description={i18n(I18nKey.animeSubtitle)}
>
  <div
    class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative min-h-32"
  >
    <div class="card-base z-10 px-9 py-6 relative w-full">
      <!-- 页面标题 -->
      <div class="relative w-full mb-8">
        <div class="mb-6">
          <h1 class="text-4xl font-bold text-black/90 dark:text-white/90 mb-2">
            {i18n(I18nKey.animeTitle)}
          </h1>
          <p class="text-black/75 dark:text-white/75">
            {i18n(I18nKey.animeSubtitle)}
          </p>
          <h2>
            由于一些限制，可能需要F5刷新一次页面才会加载追番数据，目前还没有很好的解决方法
          </h2>
        </div>

        <!-- 筛选控件 -->
        <div class="mb-8">
          <div class="filter-container">
            <button class="filter-tag active" data-status="all">全部</button>
            <button class="filter-tag" data-status="doing">在看</button>
            <button class="filter-tag" data-status="done">看过</button>
            <button class="filter-tag" data-status="wish">想看</button>
            <button class="filter-tag" data-status="onhold">搁置</button>
            <button class="filter-tag" data-status="dropped">抛弃</button>
          </div>
        </div>
      </div>

      <!-- 动漫列表 -->
      <div class="mb-8">
        <h2 class="text-2xl font-bold text-black/90 dark:text-white/90 mb-4">
          {i18n(I18nKey.animeList)}
        </h2>

        <!-- 加载状态 -->
        <div id="loadingState" class="text-center py-16">
          <div
            class="inline-flex items-center justify-center w-16 h-16 bg-blue-100 dark:bg-blue-900/30 rounded-full mb-6"
          >
            <div
              class="animate-spin w-8 h-8 border-3 border-blue-500 border-t-transparent rounded-full"
            >
            </div>
          </div>
          <h3
            class="text-xl font-semibold text-black/80 dark:text-white/80 mb-3"
          >
            正在加载追番数据...
          </h3>
          <p class="text-black/60 dark:text-white/60">
            请稍候，正在从 Bangumi 获取您的收藏信息
          </p>
        </div>

        <!-- 错误状态 -->
        <div id="errorState" class="hidden text-center py-16">
          <div
            class="inline-flex items-center justify-center w-16 h-16 bg-red-100 dark:bg-red-900/30 rounded-full mb-6"
          >
            <svg
              class="w-8 h-8 text-red-500"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-red-600 dark:text-red-400 mb-3">
            数据加载失败
          </h3>
          <p class="text-black/60 dark:text-white/60 mb-6">
            无法连接到 Bangumi API，请检查网络连接或稍后重试
          </p>
          <button
            id="retryButton"
            class="inline-flex items-center gap-2 px-6 py-3 bg-blue-500 text-white rounded-xl hover:bg-blue-600 transition-all duration-200 font-medium"
          >
            <svg
              class="w-4 h-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
              ></path>
            </svg>
            重新加载
          </button>
        </div>

        <!-- 空状态 -->
        <div id="emptyState" class="hidden text-center py-16">
          <div
            class="inline-flex items-center justify-center w-16 h-16 bg-gray-100 dark:bg-gray-800 rounded-full mb-6"
          >
            <svg
              class="w-8 h-8 text-gray-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"
              ></path>
            </svg>
          </div>
          <h3
            class="text-xl font-semibold text-black/80 dark:text-white/80 mb-3"
          >
            暂无数据
          </h3>
          <p class="text-black/60 dark:text-white/60">
            该分类下暂时没有找到相关的动漫作品
          </p>
          <p class="text-sm text-black/50 dark:text-white/50 mt-2">
            试试切换到其他分类查看
          </p>
        </div>

        <!-- 未配置状态 -->
        {
          BANGUMI_USER_ID === "your-user-id" ? (
            <div id="unconfiguredState" class="text-center py-12">
              <div class="text-5xl mb-4">⚙️</div>
              <h3 class="text-xl font-medium text-black/80 dark:text-white/80 mb-2">
                {i18n(I18nKey.animeEmpty)}
              </h3>
              <p class="text-black/60 dark:text-white/60">
                请在 src/config.ts 文件中设置你的 Bangumi 用户ID
              </p>
            </div>
          ) : null
        }

        <!-- 动漫列表容器 -->
        <div
          id="animeGrid"
          class="hidden grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 md:gap-6"
        >
          <!-- 动漫卡片将由 JavaScript 生成 -->
        </div>
      </div>

      <!-- 分页控件 -->
      <div id="paginationContainer" class="hidden">
        <div
          class="bg-gradient-to-r from-[var(--card-bg)] to-[var(--card-bg)] border border-[var(--line-divider)] rounded-[var(--radius-large)] p-6 mb-6 shadow-sm"
        >
          <div class="flex flex-col items-center gap-4">
            <div
              id="pagination"
              class="flex justify-center items-center gap-2 flex-wrap"
            >
              <!-- 分页按钮将由 JavaScript 生成 -->
            </div>

            <!-- 页面信息 -->
            <div
              id="pageInfo"
              class="flex items-center gap-2 text-sm text-black/60 dark:text-white/60 bg-gradient-to-r from-blue-50/50 to-purple-50/50 dark:from-blue-900/10 dark:to-purple-900/10 px-4 py-2 rounded-full border border-blue-200/30 dark:border-blue-700/30"
            >
              <span class="text-lg">📄</span>
              <!-- 页面信息文本将由 JavaScript 生成 -->
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</MainGridLayout>

<script
  define:vars={{
    BANGUMI_USER_ID,
    COLLECTION_TYPES,
    PAGINATION_FIRST: i18n(I18nKey.paginationFirst),
    PAGINATION_PREV: i18n(I18nKey.paginationPrev),
    PAGINATION_NEXT: i18n(I18nKey.paginationNext),
    PAGINATION_LAST: i18n(I18nKey.paginationLast),
    PAGINATION_PAGE: i18n(I18nKey.paginationPage),
    PAGINATION_OF: i18n(I18nKey.paginationOf),
    PAGINATION_TOTAL: i18n(I18nKey.paginationTotal),
    PAGINATION_RECORDS: i18n(I18nKey.paginationRecords),
  }}
>
  // 传递服务器端配置到客户端
  window.animePageConfig = {
    userId: BANGUMI_USER_ID,
    apiBase: "https://api.bgm.tv",
    collectionTypes: COLLECTION_TYPES,
    pageSize: 25,
    // 分页文本国际化
    pagination: {
      first: PAGINATION_FIRST,
      prev: PAGINATION_PREV,
      next: PAGINATION_NEXT,
      last: PAGINATION_LAST,
      page: PAGINATION_PAGE,
      of: PAGINATION_OF,
      total: PAGINATION_TOTAL,
      records: PAGINATION_RECORDS,
    },
  };
</script>

<script is:inline>
  class AnimePageManager {
    constructor() {
      this.config = window.animePageConfig;
      this.currentPage = 1;
      this.statusFilter = "all";
      this.totalCount = 0;
      this.totalPages = 0;
      this.animeData = [];
      this.allStats = { total: 0, watching: 0, completed: 0, avgRating: 0 };

      this.init();
    }

    init() {
      // 检查是否配置了用户ID
      if (this.config.userId === "your-user-id") {
        this.showUnconfiguredState();
        return;
      }

      // 从URL参数获取初始状态
      this.parseUrlParams();

      // 初始化UI
      this.initializeUI();

      // 加载数据
      this.loadData();
    }

    parseUrlParams() {
      const urlParams = new URLSearchParams(window.location.search);
      this.currentPage = parseInt(urlParams.get("page") || "1");
      this.statusFilter = urlParams.get("status") || "all";
    }

    initializeUI() {
      this.renderFilterButtons();
      this.bindEvents();
    }

    renderFilterButtons() {
      // 静态HTML已处理筛选按钮，无需动态生成
    }

    bindEvents() {
      // 筛选按钮事件
      document.addEventListener("click", (e) => {
        const filterTag = e.target.closest(".filter-tag");
        if (filterTag) {
          e.preventDefault();

          // 移除其他按钮的active类
          document.querySelectorAll(".filter-tag").forEach((btn) => {
            btn.classList.remove("active");
          });

          // 添加active类到当前按钮
          filterTag.classList.add("active");

          const status = filterTag.dataset.status;
          this.changeFilter(status);
        }
      });

      // 重试按钮事件
      document.getElementById("retryButton")?.addEventListener("click", () => {
        this.loadData();
      });

      // 分页事件委托
      document.addEventListener("click", (e) => {
        // 查找最近的 page-btn 元素
        const pageBtn = e.target.closest(".page-btn");
        if (pageBtn) {
          e.preventDefault();
          const page = parseInt(pageBtn.dataset.page);
          if (!isNaN(page)) {
            this.changePage(page);
          }
        }
      });
    }

    async loadData() {
      try {
        this.showLoading();

        // 获取当前页数据
        const filterType =
          this.statusFilter === "all"
            ? undefined
            : Object.entries(this.config.collectionTypes).find(
                ([_, v]) => v.key === this.statusFilter
              )?.[0];

        const result = await this.fetchBangumiCollections({
          type: filterType ? parseInt(filterType) : undefined,
          limit: this.config.pageSize,
          offset: (this.currentPage - 1) * this.config.pageSize,
        });

        if (result.data && result.data.length > 0) {
          this.animeData = await this.processCollectionData(result.data);
          this.totalCount = result.total || result.data.length;
          this.totalPages = Math.ceil(this.totalCount / this.config.pageSize);

          this.renderAnimeGrid();
          this.renderPagination();
          this.showDataState();
        } else {
          // 没有数据时显示空状态
          this.animeData = [];
          this.totalCount = 0;
          this.totalPages = 0;
          this.showEmpty();
        }
      } catch (error) {
        console.error("Failed to load anime data:", error);
        this.showError("加载失败");
      }
    }

    async fetchBangumiCollections(options) {
      const params = new URLSearchParams({
        subject_type: "2", // 动画类型
        limit: options.limit.toString(),
        offset: options.offset.toString(),
      });

      if (options.type) {
        params.append("type", options.type.toString());
      }

      const response = await fetch(
        `${this.config.apiBase}/v0/users/${this.config.userId}/collections?${params}`
      );

      if (!response.ok) {
        throw new Error(`Bangumi API error: ${response.status}`);
      }

      return await response.json();
    }

    async processCollectionData(collections) {
      const processedData = await Promise.all(
        collections.map(async (item) => {
          // 获取详细信息
          const details = await this.fetchSubjectDetails(item.subject_id);

          const subject = item.subject || details;
          const collectionType = this.config.collectionTypes[item.type];

          return {
            id: item.subject_id,
            title: subject?.name_cn || subject?.name || "Unknown Title",
            originalTitle: subject?.name || "",
            cover:
              subject?.images?.large ||
              subject?.images?.medium ||
              "/assets/anime/default.webp",
            description: subject?.summary || subject?.short_summary || "",
            userRating: item.rate || 0,
            score: subject?.rating?.score || 0,
            rank: subject?.rating?.rank || 0,
            status: collectionType?.key || "unknown",
            statusText: collectionType?.name || "未知",
            statusIcon: collectionType?.icon || "?",
            statusColor: collectionType?.color || "gray",
            progress: item.ep_status || 0,
            totalEpisodes: subject?.eps || 0,
            year: subject?.date ? new Date(subject.date).getFullYear() : 0,
            tags: subject?.tags?.slice(0, 5).map((tag) => tag.name) || [],
            link: `https://bgm.tv/subject/${item.subject_id}`,
            type: item.type,
            comment: item.comment || "",
          };
        })
      );

      return processedData;
    }

    async fetchSubjectDetails(subjectId) {
      try {
        const response = await fetch(
          `${this.config.apiBase}/v0/subjects/${subjectId}`
        );
        if (!response.ok) return null;
        return await response.json();
      } catch (error) {
        console.error(`Error fetching subject ${subjectId}:`, error);
        return null;
      }
    }

    renderAnimeGrid() {
      const container = document.getElementById("animeGrid");
      if (!container) return;
      let html = "";

      this.animeData.forEach((anime) => {
        const progressPercent =
          anime.totalEpisodes > 0
            ? (anime.progress / anime.totalEpisodes) * 100
            : 0;

        html += `
        <div class="group relative bg-[var(--card-bg)] border border-[var(--line-divider)] rounded-[var(--radius-large)] overflow-hidden transition-all duration-300 hover:shadow-lg hover:scale-[1.02]">
          <div class="relative aspect-[2/3] overflow-hidden">
            <a href="${anime.link}" target="_blank" rel="noopener noreferrer" class="block w-full h-full">
              <img 
                src="${anime.cover}" 
                alt="${anime.title}"
                class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110"
                loading="lazy"
              />
              <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                <div class="absolute inset-0 flex items-center justify-center">
                  <div class="w-12 h-12 rounded-full bg-white/90 flex items-center justify-center">
                    <svg class="w-6 h-6 text-gray-800 ml-1" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M8 5v14l11-7z"/>
                    </svg>
                  </div>
                </div>
              </div>
            </a>
            
            <div class="absolute top-2 left-2 px-2 py-1 rounded-md text-xs font-medium bg-${anime.statusColor}-100 text-${anime.statusColor}-700 dark:bg-${anime.statusColor}-900/30 dark:text-${anime.statusColor}-300">
              <span class="mr-1">${anime.statusIcon}</span>
              <span>${anime.statusText}</span>
            </div>
            
            ${
              anime.userRating > 0
                ? `
              <div class="absolute top-2 right-2 bg-black/70 text-white px-2 py-1 rounded-md text-xs font-medium flex items-center gap-1">
                <svg class="w-3 h-3 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                </svg>
                <span>${anime.userRating}</span>
              </div>
            `
                : anime.score > 0
                  ? `
              <div class="absolute top-2 right-2 bg-black/70 text-white px-2 py-1 rounded-md text-xs font-medium">
                📊 ${anime.score}
              </div>
            `
                  : ""
            }
            
            ${
              anime.status === "doing" &&
              anime.progress > 0 &&
              anime.totalEpisodes > 0
                ? `
              <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-2">
                <div class="w-full bg-white/20 rounded-full h-1.5 mb-1">
                  <div class="bg-gradient-to-r from-emerald-400 to-teal-400 h-1.5 rounded-full transition-all duration-300" style="width: ${Math.min(progressPercent, 100)}%"></div>
                </div>
                <div class="text-white text-xs font-medium">
                  ${anime.progress}/${anime.totalEpisodes} (${Math.round(progressPercent)}%)
                </div>
              </div>
            `
                : ""
            }
          </div>
          
          <div class="p-3">
            <h3 class="text-sm font-bold text-black/90 dark:text-white/90 mb-1 line-clamp-2 leading-tight">${anime.title}</h3>
            ${
              anime.originalTitle && anime.originalTitle !== anime.title
                ? `
              <p class="text-black/50 dark:text-white/50 text-xs mb-1 line-clamp-1">${anime.originalTitle}</p>
            `
                : ""
            }
            ${
              anime.description
                ? `
              <p class="text-black/60 dark:text-white/60 text-xs mb-2 line-clamp-2">${anime.description}</p>
            `
                : ""
            }
            
            <div class="space-y-1 text-xs">
              <div class="flex justify-between">
                <span class="text-black/50 dark:text-white/50">年份</span>
                <span class="text-black/70 dark:text-white/70">${anime.year || "未知"}</span>
              </div>
              ${
                anime.totalEpisodes > 0
                  ? `
                <div class="flex justify-between">
                  <span class="text-black/50 dark:text-white/50">集数</span>
                  <span class="text-black/70 dark:text-white/70">${anime.totalEpisodes}</span>
                </div>
              `
                  : ""
              }
              ${
                anime.rank > 0
                  ? `
                <div class="flex justify-between">
                  <span class="text-black/50 dark:text-white/50">排名</span>
                  <span class="text-black/70 dark:text-white/70">#${anime.rank}</span>
                </div>
              `
                  : ""
              }
              <div class="flex flex-wrap gap-1 mt-2">
                ${anime.tags
                  .slice(0, 3)
                  .map(
                    (tag) => `
                  <span class="px-1.5 py-0.5 bg-[var(--btn-regular-bg)] text-black/70 dark:text-white/70 rounded text-xs">${tag}</span>
                `
                  )
                  .join("")}
              </div>
            </div>

            ${
              anime.comment
                ? `
              <div class="mt-2 pt-2 border-t border-[var(--line-divider)]">
                <p class="text-xs text-black/60 dark:text-white/60 line-clamp-2">
                  💭 ${anime.comment}
                </p>
              </div>
            `
                : ""
            }
          </div>
        </div>
      `;
      });

      container.innerHTML = html;
    }

    renderPagination() {
      if (this.totalPages <= 1) {
        document.getElementById("paginationContainer")?.classList.add("hidden");
        return;
      }

      const container = document.getElementById("pagination");
      if (!container) return;
      let html = "";

      const hasPrevPage = this.currentPage > 1;
      const hasNextPage = this.currentPage < this.totalPages;

      // 上一页按钮
      if (hasPrevPage) {
        html += `
        <button class="page-btn inline-flex items-center gap-2 px-4 py-2.5 border border-[var(--line-divider)] rounded-xl text-sm font-medium hover:bg-[var(--btn-regular-bg)] transition-all" data-page="1">
          <span>⏪</span>
          <span>${this.config.pagination.first}</span>
        </button>
        <button class="page-btn inline-flex items-center gap-2 px-4 py-2.5 border border-[var(--line-divider)] rounded-xl text-sm font-medium hover:bg-[var(--btn-regular-bg)] transition-all" data-page="${this.currentPage - 1}">
          <span>⬅️</span>
          <span>${this.config.pagination.prev}</span>
        </button>
      `;
      }

      // 页码按钮
      const startPage = Math.max(1, this.currentPage - 2);
      const endPage = Math.min(this.totalPages, startPage + 4);

      for (let page = startPage; page <= endPage; page++) {
        const isActive = page === this.currentPage;
        html += `
        <button class="page-btn px-4 py-2.5 rounded-xl text-sm font-semibold transition-all ${
          isActive
            ? "bg-gradient-to-r from-blue-500 to-blue-600 text-white shadow-lg shadow-blue-500/25 scale-105"
            : "border border-[var(--line-divider)] hover:bg-[var(--btn-regular-bg)]"
        }" data-page="${page}">
          ${page}
        </button>
      `;
      }

      // 下一页按钮
      if (hasNextPage) {
        html += `
        <button class="page-btn inline-flex items-center gap-2 px-4 py-2.5 border border-[var(--line-divider)] rounded-xl text-sm font-medium hover:bg-[var(--btn-regular-bg)] transition-all" data-page="${this.currentPage + 1}">
          <span>${this.config.pagination.next}</span>
          <span>➡️</span>
        </button>
        <button class="page-btn inline-flex items-center gap-2 px-4 py-2.5 border border-[var(--line-divider)] rounded-xl text-sm font-medium hover:bg-[var(--btn-regular-bg)] transition-all" data-page="${this.totalPages}">
          <span>${this.config.pagination.last}</span>
          <span>⏩</span>
        </button>
      `;
      }

      container.innerHTML = html;

      // 页面信息
      const pageInfoEl = document.getElementById("pageInfo");
      if (pageInfoEl)
        pageInfoEl.innerHTML = `
      ${this.config.pagination.page} ${this.currentPage} ${this.config.pagination.of} ${this.totalPages} ${this.config.pagination.total} ${this.totalCount} ${this.config.pagination.records}
    `;

      document
        .getElementById("paginationContainer")
        ?.classList.remove("hidden");
    }

    changeFilter(status) {
      this.statusFilter = status;
      this.currentPage = 1;
      this.updateUrl();
      this.renderFilterButtons();
      this.loadData();
    }

    changePage(page) {
      this.currentPage = page;
      this.updateUrl();
      this.loadData();
      window.scrollTo({ top: 0, behavior: "smooth" });
    }

    updateUrl() {
      const params = new URLSearchParams();
      if (this.currentPage > 1) params.set("page", this.currentPage.toString());
      if (this.statusFilter !== "all") params.set("status", this.statusFilter);

      let newPath = "/anime/";
      const search = params.toString();
      const newUrl = search ? `${newPath}?${search}` : newPath;

      window.history.pushState(null, "", newUrl);
    }

    showLoading() {
      document.getElementById("loadingState")?.classList.remove("hidden");
      document.getElementById("errorState")?.classList.add("hidden");
      document.getElementById("emptyState")?.classList.add("hidden");
      document.getElementById("animeGrid")?.classList.add("hidden");
      document.getElementById("paginationContainer")?.classList.add("hidden");
    }

    showError(message) {
      document.getElementById("loadingState")?.classList.add("hidden");
      document.getElementById("errorState")?.classList.remove("hidden");
      document.getElementById("emptyState")?.classList.add("hidden");
      document.getElementById("animeGrid")?.classList.add("hidden");
      document.getElementById("paginationContainer")?.classList.add("hidden");
    }

    showEmpty() {
      document.getElementById("loadingState")?.classList.add("hidden");
      document.getElementById("errorState")?.classList.add("hidden");
      document.getElementById("emptyState")?.classList.remove("hidden");
      document.getElementById("animeGrid")?.classList.add("hidden");
      document.getElementById("paginationContainer")?.classList.add("hidden");
    }

    showDataState() {
      document.getElementById("loadingState")?.classList.add("hidden");
      document.getElementById("errorState")?.classList.add("hidden");
      document.getElementById("emptyState")?.classList.add("hidden");
      document.getElementById("animeGrid")?.classList.remove("hidden");
    }

    showUnconfiguredState() {
      document.getElementById("loadingState")?.classList.add("hidden");
      document.getElementById("errorState")?.classList.add("hidden");
      document.getElementById("emptyState")?.classList.add("hidden");
      document.getElementById("animeGrid")?.classList.add("hidden");
      document.getElementById("paginationContainer")?.classList.add("hidden");
    }
  }

  // 全局初始化函数
  window.initAnimeManager = function () {
    console.log("initAnimeManager called, pathname:", window.location.pathname);

    // 只在动漫页面初始化
    if (!window.location.pathname.includes("/anime")) {
      console.log("Not on anime page, skipping");
      return;
    }

    // 检查是否已经初始化
    if (window.animeManagerInitialized) {
      console.log("Already initialized, skipping");
      return;
    }

    console.log("Attempting to initialize anime manager...");

    let retryCount = 0;
    const maxRetries = 20;

    const checkAndInit = () => {
      console.log(`Initialization attempt ${retryCount + 1}/${maxRetries}`);

      if (!window.animePageConfig) {
        console.log("animePageConfig not found");
        if (retryCount < maxRetries) {
          retryCount++;
          setTimeout(checkAndInit, 100);
        }
        return;
      }

      const loadingEl = document.getElementById("loadingState");
      if (!loadingEl) {
        console.log("loadingState element not found");
        if (retryCount < maxRetries) {
          retryCount++;
          setTimeout(checkAndInit, 100);
        }
        return;
      }

      console.log("Config and DOM ready, initializing AnimePageManager...");
      try {
        new AnimePageManager();
        window.animeManagerInitialized = true;
        console.log("AnimePageManager initialized successfully");
      } catch (error) {
        console.error("Initialization failed:", error);
        if (retryCount < maxRetries) {
          retryCount++;
          setTimeout(checkAndInit, 200);
        }
      }
    };

    checkAndInit();
  };

  // 重置函数
  window.resetAnimeManager = function () {
    console.log("Resetting anime manager");
    window.animeManagerInitialized = false;
  };

  // 立即尝试初始化
  setTimeout(() => {
    console.log("Initial initialization attempt");
    window.initAnimeManager();
  }, 0);

  // DOM事件监听
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      console.log("DOMContentLoaded fired");
      setTimeout(window.initAnimeManager, 50);
    });
  }

  // 页面加载完成
  window.addEventListener("load", () => {
    console.log("Window load fired");
    setTimeout(window.initAnimeManager, 100);
  });

  // Swup事件监听
  document.addEventListener("swup:contentReplaced", (event) => {
    console.log("swup:contentReplaced fired", event);
    window.resetAnimeManager();
    setTimeout(window.initAnimeManager, 200);
  });

  document.addEventListener("swup:pageView", (event) => {
    console.log("swup:pageView fired", event);
    setTimeout(window.initAnimeManager, 300);
  });

  // 备用初始化 - 如果所有其他方法都失败了
  setTimeout(() => {
    console.log("Backup initialization check");
    if (
      window.location.pathname.includes("/anime") &&
      document.getElementById("loadingState") &&
      !window.animeManagerInitialized
    ) {
      console.log("Backup initialization triggered");
      window.initAnimeManager();
    }
  }, 3000);
</script>

<!-- 额外的 Swup 兼容性脚本 -->
<script is:inline>
  (function () {
    console.log("Swup compatibility script loaded");

    // 监听所有可能的 Swup 事件
    const swupEvents = [
      "swup:contentReplaced",
      "swup:pageView",
      "swup:animationOutDone",
      "swup:transitionStart",
      "swup:transitionEnd",
    ];

    swupEvents.forEach((eventName) => {
      document.addEventListener(eventName, (event) => {
        console.log(`${eventName} event fired`);
        if (window.location.pathname.includes("/anime")) {
          if (window.resetAnimeManager) {
            window.resetAnimeManager();
          }
          setTimeout(() => {
            if (window.initAnimeManager) {
              window.initAnimeManager();
            }
          }, 100);
        }
      });
    });

    // 监听 URL 变化（用于 pushState/replaceState）
    let currentPath = window.location.pathname;

    const checkPathChange = () => {
      if (window.location.pathname !== currentPath) {
        console.log(
          "Path changed from",
          currentPath,
          "to",
          window.location.pathname
        );
        currentPath = window.location.pathname;

        if (currentPath.includes("/anime")) {
          if (window.resetAnimeManager) {
            window.resetAnimeManager();
          }
          setTimeout(() => {
            if (window.initAnimeManager) {
              window.initAnimeManager();
            }
          }, 150);
        }
      }
    };

    // 定期检查路径变化
    setInterval(checkPathChange, 500);

    // 监听 popstate 事件（浏览器前进后退）
    window.addEventListener("popstate", () => {
      console.log("Popstate event fired");
      setTimeout(checkPathChange, 100);
    });
  })();
</script>

<style>
  .filter-container {
    display: flex;
    flex-wrap: wrap;
    gap: 12px;
    align-items: flex-start;
    margin-bottom: 24px;
  }

  .filter-tag {
    display: inline-flex;
    align-items: center;
    gap: 6px;
    padding: 8px 16px;
    font-size: 14px;
    font-weight: 500;
    background: #f1f5f9;
    color: #64748b;
    border: 1px solid #e2e8f0;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.2s ease;
    outline: none;
  }

  .filter-tag:hover {
    background: #e2e8f0;
    color: #475569;
    border-color: #cbd5e1;
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .filter-tag.active {
    background: #3b82f6;
    color: white;
    border-color: #3b82f6;
    box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
  }

  .filter-tag.active:hover {
    background: #2563eb;
    border-color: #2563eb;
  }

  .tag-count {
    background: rgba(255, 255, 255, 0.8);
    color: #374151;
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 600;
    min-width: 20px;
    text-align: center;
  }

  .filter-tag.active .tag-count {
    background: rgba(255, 255, 255, 0.2);
    color: white;
  }

  .line-clamp-1 {
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* 美化分页按钮 */
  .page-btn {
    @apply transition-all duration-200 transform-gpu;
    @apply hover:scale-105 hover:shadow-md;
  }

  .page-btn:hover {
    @apply bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/30;
    @apply border-blue-300 dark:border-blue-600;
  }

  /* 美化重试按钮 */
  #retryButton {
    @apply bg-gradient-to-r from-blue-500 to-blue-600;
    @apply hover:from-blue-600 hover:to-blue-700;
    @apply shadow-lg shadow-blue-500/25;
    @apply transform-gpu transition-all duration-200;
    @apply hover:scale-105 hover:shadow-xl;
  }

  /* 加载状态动画 */
  @keyframes pulse-soft {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0.7;
    }
  }

  #loadingState {
    animation: pulse-soft 2s ease-in-out infinite;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }

  .border-3 {
    border-width: 3px;
  }

  .border-t-transparent {
    border-top-color: transparent;
  }

  /* 选择框美化 */
  #sortSelect:focus {
    @apply ring-2 ring-blue-500/20 border-blue-500;
  }

  #sortSelect option {
    @apply bg-white dark:bg-neutral-800 text-black dark:text-white;
  }
</style>
